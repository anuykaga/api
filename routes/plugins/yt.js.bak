import axios from 'axios'
const ytdown = {
	api: {
		base: "https://p.oceansaver.in/ajax/",
		progress: "https://p.oceansaver.in/ajax/progress.php"
	},
	headers: {
		'authority': 'p.oceansaver.in',
		'origin': 'https://y2down.cc',
		'referer': 'https://y2down.cc/',
		'user-agent': 'Postify/1.0.0'
	},
	formats: ['360', '480', '720', '1080', '1440', '2160', 'mp3', 'm4a', 'wav', 'aac', 'flac', 'opus', 'ogg'],

	isUrl: str => {
		try {
			new URL(str);
			return true;
		} catch (_) {
			return false;
		}
	},

	youtube: url => {
		if (!url) return null;
		const a = [
			/youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/,
			/youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/,
			/youtube\.com\/v\/([a-zA-Z0-9_-]{11})/,
			/youtube\.com\/shorts\/([a-zA-Z0-9_-]{11})/,
			/youtu\.be\/([a-zA-Z0-9_-]{11})/
		];
		for (let b of a) {
			if (b.test(url)) return url.match(b)[1];
		}
		return null;
	},

	request: async (endpoint, params = {}) => {
		try {
			const {
				data
			} = await axios.get(`${ytdown.api.base}${endpoint}`, {
				params,
				headers: ytdown.headers,
				withCredentials: true
			});
			return data;
		} catch (error) {
			console.error(error.message, error.response?.data);
			throw error;
		}
	},

	download: async (link, format) => {
		if (!link) return {
			error: "Linknya mana? Yakali download kagak ada linknya 🗿"
		};
		if (!ytdown.isUrl(link)) return {
			error: "Lu masukin link apaan sih 🗿 Link Youtube aja bree, kan lu mau download youtube 👍🏻"
		};
		if (!format || !ytdown.formats.includes(format)) return {
			error: "Formatnya kagak ada bree, pilih yang udah disediain aja yak, jangan nyari yang gak ada 🗿",
			availableFormats: ytdown.formats
		};

		const id = ytdown.youtube(link);
		if (!id) return {
			error: "Kagak bisa ekstrak link youtubenya nih, btw link youtubenya yang bener yak.. biar kagak kejadian begini lagi 😂"
		};

		try {
			const response = await ytdown.request("download.php", {
				format,
				url: `https://www.youtube.com/watch?v=${id}`
			});
			return ytdown.handler(response, format, id);
		} catch (error) {
			return {
				error: `${error.message}`,
				details: error.response?.data
			};
		}
	},

	handler: async (data, format, id) => {
		if (!data.success) return {
			error: data.message || "Error"
		};
		if (!data.id) return {
			error: "ID Downloadnya kagak ada bree, jadi proses downloadnya kagak dilanjutin 😂"
		};

		try {
			const pr = await ytdown.checkProgress(data.id);
			return pr.success ? ytdown.final(data, pr, format, id) : pr;
		} catch (error) {
			return {
				error: `${error.message}`
			};
		}
	},

	checkProgress: async (id) => {
		let attempts = 0,
			lastProgress = -1;
		//process.stdout.write("✨ Progress: [] 0%");

		while (attempts < 100) {
			try {
				const {
					data
				} = await axios.get(ytdown.api.progress, {
					params: {
						id
					},
					headers: ytdown.headers,
					withCredentials: true
				});

				const currentProgress = Math.round(data.progress / 10);
				if (currentProgress !== lastProgress) {
					ytdown.updateBar(currentProgress);
					lastProgress = currentProgress;
				}

				if (data.download_url && data.success) {
					return {
						success: true,
						...data
					};
				} else if (!data.download_url && data.success) {
					return {
						error: data.text
					};
				}

				await new Promise(resolve => setTimeout(resolve, 1000));
				attempts++;
			} catch (error) {
				console.error("\n", error);
				attempts++;
				await new Promise(resolve => setTimeout(resolve, 1000));
			}
		}

		return {
			error: "Proses downloadnya kagak bisa di lanjutin bree, Timeout 😂"
		};
	},

	updateBar: (progress) => {
		const barLength = 30;
		const filledLength = Math.round(barLength * progress / 100);
		const bar = '█'.repeat(filledLength) + ' '.repeat(barLength - filledLength);
		//process.stdout.clearLine();
		//process.stdout.cursorTo(0);
		//process.stdout.write(`✨ Progress: [${bar}] ${progress}%\n\n`);
	},

	final: (init, pro, formats, id) => ({
		success: true,
		title: init.title || "Idk 🤷🏻",
		type: ['360', '480', '720', '1080', '1440', '2160'].includes(formats) ? 'video' : 'audio',
		formats,
		thumbnail: init.info?.image || `https://img.youtube.com/vi/${id}/hqdefault.jpg`,
		download: pro.download_url || "Idk 🤷🏻",
		id: id
	})
};
export async function ytmp3_link(link) {
	try {
		const data = await ytdown.download(link, 'mp3')
		return data.download
	} catch (error) {
		console.error('Terjadi kesalahan:', error);
		return 'Error'
	}
};
export async function ytmp4_link(link) {
	try {
		const data = await ytdown.download(link, '720')
		return data.download
	} catch (error) {
		console.error('Terjadi kesalahan:', error.message);
		return 'Error'
	}
}